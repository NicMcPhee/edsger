(ns edsger.parsing
  (:require [instaparse.core :as insta]))

(def lisp-style-cfg
  (insta/parser
   "S = '('A')' | '('B' 'S')' | '('C' 'S' 'S')'
    A = E | D
    E = 'a' | 'b' | 'c'
    D = 'true' | 'false'
    B = 'not'
    C = 'and' | 'or' | 'equiv'"
   ))

(defn mk-list
  "Takes in a tree generated by lisp-style-cfg and
   returns a simple list of lists representing the expression."
  [hiccup-tree]
  (case (first hiccup-tree)
    :S (map mk-list (filter vector? hiccup-tree))
    :A (mk-list (second hiccup-tree))
    :E (symbol (second hiccup-tree))
    :D (if (= "true" (second hiccup-tree)) true false)
    :B (keyword (second hiccup-tree))
    :C (keyword (second hiccup-tree))
    ))

(defn parse
  "Takes an stringfied expression and converts it into
   a legitimate expression. Returns nil when the expression
   cannot be parsed. (TODO: improve error reporting)."
  [expression]
  (let [hiccup-tree (lisp-style-cfg expression)]
    (if-not (= (type hiccup-tree) instaparse.gll/Failure)
      (mk-list hiccup-tree))))

(defn rulify
  "Recursively traverse a list and prepend '?' onto
   all symbols."
  [input]
  (map
   (fn [element]
     (cond
       (list? element) (rulify element)
       (symbol? element) (symbol (str "?" element))
       :else element))
   input))

(print "START in parsing")



;; (print (as-and-bs "(and (a) (b))"))
;; (print (count (as-and-bs "(and (a) (b))")))
;; (print (type (as-and-bs "(and (a) )")))

(print "ENND in parsing")
